import pandas as pd
import numpy as np
from time import time

def cargar_datos_csv(ruta_archivo):
    """
    Carga el archivo CSV con bloques separados por espacios.
    """
    t1 = time()
    df = pd.read_csv(ruta_archivo, sep='\s+')
    t2 = time() - t1
    print("Tiempo en cargar datos CSV =", t2)
    return df

def dividir_bloques(df, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz):
    """
    Divide bloques grandes en sub-bloques más pequeños si el tamaño nuevo es múltiplo del original.

    Args:
        df (pd.DataFrame): DataFrame con bloques originales.
        dx, dy, dz (float): Dimensiones originales de los bloques.
        nuevo_dx, nuevo_dy, nuevo_dz (float): Dimensiones deseadas para los nuevos bloques.

    Returns:
        pd.DataFrame: DataFrame con los sub-bloques generados.
    """
    t1 = time()
    if dx % nuevo_dx != 0 or dy % nuevo_dy != 0 or dz % nuevo_dz != 0:
        raise ValueError("El nuevo tamaño de bloque no es múltiplo del tamaño original.")

    subdivisiones_x = int(dx / nuevo_dx)
    subdivisiones_y = int(dy / nuevo_dy)
    subdivisiones_z = int(dz / nuevo_dz)

    nuevos_bloques = []
    for index, row in df.iterrows():
        # Coordenadas del centro del bloque original
        x_centro, y_centro, z_centro = row["x"], row["y"], row["z"]
        for i in range(subdivisiones_x):
            for j in range(subdivisiones_y):
                for k in range(subdivisiones_z):
                    # Calcular el nuevo centro
                    nuevo_x = x_centro - dx / 2 + nuevo_dx / 2 + i * nuevo_dx
                    nuevo_y = y_centro - dy / 2 + nuevo_dy / 2 + j * nuevo_dy
                    nuevo_z = z_centro - dz / 2 + nuevo_dz / 2 + k * nuevo_dz

                    # Copiar las propiedades del bloque original
                    nuevo_bloque = row.to_dict()
                    nuevo_bloque["x"], nuevo_bloque["y"], nuevo_bloque["z"] = nuevo_x, nuevo_y, nuevo_z
                    nuevos_bloques.append(nuevo_bloque)
    t2 = time() - t1
    print("Tiempo en dividir bloques =", t2)
    return pd.DataFrame(nuevos_bloques)

def calcular_intersecciones_numpy(centros_originales, dimensiones_originales, centro_nuevo, dimensiones_nuevo):
    """
    Calcula la proporción de intersección entre múltiples bloques originales y un bloque nuevo utilizando NumPy.
    """
    min_original = centros_originales - dimensiones_originales / 2
    max_original = centros_originales + dimensiones_originales / 2

    min_nuevo = centro_nuevo - dimensiones_nuevo / 2
    max_nuevo = centro_nuevo + dimensiones_nuevo / 2

    # Calcular intersecciones por cada eje
    interseccion_x = np.maximum(0, np.minimum(max_original[:, 0], max_nuevo[0]) - np.maximum(min_original[:, 0], min_nuevo[0]))
    interseccion_y = np.maximum(0, np.minimum(max_original[:, 1], max_nuevo[1]) - np.maximum(min_original[:, 1], min_nuevo[1]))
    interseccion_z = np.maximum(0, np.minimum(max_original[:, 2], max_nuevo[2]) - np.maximum(min_original[:, 2], min_nuevo[2]))

    # Volumen de intersección
    volumen_interseccion = interseccion_x * interseccion_y * interseccion_z
    volumen_original = np.prod(dimensiones_originales, axis=1)
    return volumen_interseccion / volumen_original

def rebloquear_bloques_ponderado(df, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz):
    """
    Realiza el rebloqueo calculando intersecciones y ponderaciones cuando los bloques no son múltiplos exactos.
    """
    t1 = time()
    columnas_propiedades = [col for col in df.columns if col not in ["x", "y", "z"]]

    # Convertir Df a arrays NumPy para rapidez
    centros_originales = df[["x", "y", "z"]].to_numpy()
    propiedades_originales = df[columnas_propiedades].to_numpy()
    dimensiones_originales = np.array([[dx, dy, dz]] * len(df))

    # defino rangos antes para hacerlo más rápido
    x_range = np.arange(df["x"].min() - dx, df["x"].max() + dx, nuevo_dx)
    y_range = np.arange(df["y"].min() - dy, df["y"].max() + dy, nuevo_dy)
    z_range = np.arange(df["z"].min() - dz, df["z"].max() + dz, nuevo_dz)

   #Definir antes dimensiones_nuevo para menor tiempo en ciclo
    nuevos_bloques = []
    dimensiones_nuevo = np.array([nuevo_dx, nuevo_dy, nuevo_dz])

    for x in x_range:
        for y in y_range:
            for z in z_range:
                # Calcular centro del bloque nuevo
                nuevo_centro = np.array([x + nuevo_dx // 2, y + nuevo_dy // 2, z + nuevo_dz // 2])

                # Filtrar bloques relevantes para el cálculo
                distancias = np.abs(centros_originales - nuevo_centro)
                max_distancias = dimensiones_originales[0] / 2 + dimensiones_nuevo / 2
                indices_relevantes = np.all(distancias <= max_distancias, axis=1)

                if not np.any(indices_relevantes):
                    continue

                # Calcular proporciones de intersección
                proporciones = calcular_intersecciones_numpy(
                    centros_originales[indices_relevantes],
                    dimensiones_originales[indices_relevantes],
                    nuevo_centro,
                    dimensiones_nuevo,
                )

                # Filtrar proporciones relevantes
                proporciones_relevantes = proporciones[proporciones > 0]
                if proporciones_relevantes.size == 0:
                    continue

                valores_relevantes = propiedades_originales[indices_relevantes][proporciones > 0]
                suma_pesos = proporciones_relevantes.sum()

                # Calcular propiedades ponderadas
                propiedades_ponderadas = np.dot(proporciones_relevantes, valores_relevantes) / suma_pesos

                # Crear el bloque nuevo
                bloque_actual_0 = dict(zip(columnas_propiedades, propiedades_ponderadas))
                bloque_actual_0.update({"x": nuevo_centro[0], "y": nuevo_centro[1], "z": nuevo_centro[2]})
                  
                # Llevar al inicio las columnas para que x y z estén al principio
                columnas_reordenadas = ["x", "y", "z"] + [col for col in bloque_actual_0 if col not in ["x","y", "z"]]
                bloque_actual = {col: bloque_actual_0[col] for col in columnas_reordenadas}

                nuevos_bloques.append(bloque_actual)

    t2 = time() - t1
    print("Tiempo en rebloquear bloques ponderado =", t2)
    return pd.DataFrame(nuevos_bloques)

def rebloquear_bloques(df, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz):
    """
    Decide entre dividir bloques directamente o realizar rebloqueo ponderado.
    """
    t1 = time()
    if dx % nuevo_dx == 0 and dy % nuevo_dy == 0 and dz % nuevo_dz == 0:
        print("El nuevo tamaño es múltiplo del original. Dividiendo bloques directamente...")
        t2 = time() - t1
        print("Tiempo en rebloquear bloques =", t2)
        return dividir_bloques(df, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz)
    else:
        print("El nuevo tamaño no es múltiplo del original. Realizando rebloqueo ponderado...")
        t2 = time() - t1
        print("Tiempo en rebloquear bloques =", t2)
        return rebloquear_bloques_ponderado(df, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz)

def guardar_csv(df, ruta_salida):
    """
    Guarda el DataFrame resultante a un archivo CSV.
    """
    t1 = time()
    df.to_csv(ruta_salida, sep=' ', index=False)
    t2 = time() - t1
    print("Tiempo en guardar CSV =", t2)

def main():
    t0 = time()
    ruta_entrada = "mb_general1.csv"
    ruta_salida = "modelo_rebloqueado1.csv"

    # Tamaño actual y nuevo de los bloques
    dx, dy, dz = 10.0, 10.0, 10.0  # Tamaño original
    nuevo_dx, nuevo_dy, nuevo_dz = 3.0, 3.0, 3.0  # Tamaño deseado

    # Cargar datos
    df_bloques = cargar_datos_csv(ruta_entrada)

    # Elegir el método adecuado y realizar el rebloqueo
    df_rebloqueado = rebloquear_bloques(df_bloques, dx, dy, dz, nuevo_dx, nuevo_dy, nuevo_dz)

    # Guardar resultados
    guardar_csv(df_rebloqueado, ruta_salida)
    t = time() - t0
    print("Proceso completado. Modelo rebloqueado guardado en:", ruta_salida)
    print("tiempo Simulador = " + str(round(t, 2)) + " s")
if __name__ == "__main__":
    main()
